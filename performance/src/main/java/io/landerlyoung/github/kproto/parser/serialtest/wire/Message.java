// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto.proto at 25:1
package io.landerlyoung.github.kproto.parser.serialtest.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class Message extends com.squareup.wire.Message<Message, Message.Builder> {
  public static final ProtoAdapter<Message> ADAPTER = new ProtoAdapter_Message();

  private static final long serialVersionUID = 0L;

  public static final ItemType DEFAULT_ITEMTYPE = ItemType.TEXT;

  @WireField(
      tag = 1,
      adapter = "io.landerlyoung.github.kproto.parser.serialtest.wire.ItemType#ADAPTER"
  )
  public final ItemType itemType;

  @WireField(
      tag = 2,
      adapter = "io.landerlyoung.github.kproto.parser.serialtest.wire.CompoundItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<CompoundItem> items;

  public Message(ItemType itemType, List<CompoundItem> items) {
    this(itemType, items, ByteString.EMPTY);
  }

  public Message(ItemType itemType, List<CompoundItem> items, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.itemType = itemType;
    this.items = Internal.immutableCopyOf("items", items);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.itemType = itemType;
    builder.items = Internal.copyOf("items", items);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Message)) return false;
    Message o = (Message) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(itemType, o.itemType)
        && items.equals(o.items);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (itemType != null ? itemType.hashCode() : 0);
      result = result * 37 + items.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (itemType != null) builder.append(", itemType=").append(itemType);
    if (!items.isEmpty()) builder.append(", items=").append(items);
    return builder.replace(0, 2, "Message{").append('}').toString();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<Message, Builder> {
    public ItemType itemType;

    public List<CompoundItem> items;

    public Builder() {
      items = Internal.newMutableList();
    }

    public Builder itemType(ItemType itemType) {
      this.itemType = itemType;
      return this;
    }

    public Builder items(List<CompoundItem> items) {
      Internal.checkElementsNotNull(items);
      this.items = items;
      return this;
    }

    @Override
    public Message build() {
      return new Message(itemType, items, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Message extends ProtoAdapter<Message> {
    ProtoAdapter_Message() {
      super(FieldEncoding.LENGTH_DELIMITED, Message.class);
    }

    @Override
    public int encodedSize(Message value) {
      return (value.itemType != null ? ItemType.ADAPTER.encodedSizeWithTag(1, value.itemType) : 0)
          + CompoundItem.ADAPTER.asRepeated().encodedSizeWithTag(2, value.items)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Message value) throws IOException {
      if (value.itemType != null) ItemType.ADAPTER.encodeWithTag(writer, 1, value.itemType);
      CompoundItem.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.items);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Message decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.itemType(ItemType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.items.add(CompoundItem.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Message redact(Message value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.items, CompoundItem.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
