// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto.proto at 18:1
package io.landerlyoung.github.kproto.parser.serialtest.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class CompoundItem extends Message<CompoundItem, CompoundItem.Builder> {
  public static final ProtoAdapter<CompoundItem> ADAPTER = new ProtoAdapter_CompoundItem();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "io.landerlyoung.github.kproto.parser.serialtest.wire.TextItem#ADAPTER"
  )
  public final TextItem text;

  @WireField(
      tag = 2,
      adapter = "io.landerlyoung.github.kproto.parser.serialtest.wire.PictureItem#ADAPTER"
  )
  public final PictureItem picture;

  public CompoundItem(TextItem text, PictureItem picture) {
    this(text, picture, ByteString.EMPTY);
  }

  public CompoundItem(TextItem text, PictureItem picture, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    if (Internal.countNonNull(text, picture) > 1) {
      throw new IllegalArgumentException("at most one of text, picture may be non-null");
    }
    this.text = text;
    this.picture = picture;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.text = text;
    builder.picture = picture;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CompoundItem)) return false;
    CompoundItem o = (CompoundItem) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(text, o.text)
        && Internal.equals(picture, o.picture);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (text != null ? text.hashCode() : 0);
      result = result * 37 + (picture != null ? picture.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (text != null) builder.append(", text=").append(text);
    if (picture != null) builder.append(", picture=").append(picture);
    return builder.replace(0, 2, "CompoundItem{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CompoundItem, Builder> {
    public TextItem text;

    public PictureItem picture;

    public Builder() {
    }

    public Builder text(TextItem text) {
      this.text = text;
      this.picture = null;
      return this;
    }

    public Builder picture(PictureItem picture) {
      this.picture = picture;
      this.text = null;
      return this;
    }

    @Override
    public CompoundItem build() {
      return new CompoundItem(text, picture, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CompoundItem extends ProtoAdapter<CompoundItem> {
    ProtoAdapter_CompoundItem() {
      super(FieldEncoding.LENGTH_DELIMITED, CompoundItem.class);
    }

    @Override
    public int encodedSize(CompoundItem value) {
      return (value.text != null ? TextItem.ADAPTER.encodedSizeWithTag(1, value.text) : 0)
          + (value.picture != null ? PictureItem.ADAPTER.encodedSizeWithTag(2, value.picture) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CompoundItem value) throws IOException {
      if (value.text != null) TextItem.ADAPTER.encodeWithTag(writer, 1, value.text);
      if (value.picture != null) PictureItem.ADAPTER.encodeWithTag(writer, 2, value.picture);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CompoundItem decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.text(TextItem.ADAPTER.decode(reader)); break;
          case 2: builder.picture(PictureItem.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CompoundItem redact(CompoundItem value) {
      Builder builder = value.newBuilder();
      if (builder.text != null) builder.text = TextItem.ADAPTER.redact(builder.text);
      if (builder.picture != null) builder.picture = PictureItem.ADAPTER.redact(builder.picture);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
