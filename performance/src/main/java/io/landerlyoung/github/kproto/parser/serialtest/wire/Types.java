// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto.proto at 38:1
package io.landerlyoung.github.kproto.parser.serialtest.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import java.util.Map;
import okio.ByteString;

public final class Types extends Message<Types, Types.Builder> {
  public static final ProtoAdapter<Types> ADAPTER = new ProtoAdapter_Types();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_TITLE = "";

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_GENDER = "";

  public static final Integer DEFAULT_OPT_INT32 = 0;

  public static final Long DEFAULT_OPT_INT64 = 0L;

  public static final Integer DEFAULT_OPT_SINT32 = 0;

  public static final Long DEFAULT_OPT_SINT64 = 0L;

  public static final Boolean DEFAULT_OPT_BOOL = false;

  public static final Float DEFAULT_OPT_FLOAT = 0.0f;

  public static final Double DEFAULT_OPT_DOUBLE = 0.0d;

  public static final ByteString DEFAULT_OPT_BYTES = ByteString.EMPTY;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String gender;

  /**
   * omit uint
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer opt_int32;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long opt_int64;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  public final Integer opt_sint32;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  public final Long opt_sint64;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean opt_bool;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float opt_float;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double opt_double;

  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString opt_bytes;

  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> pack_int32;

  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> pack_string;

  @WireField(
      tag = 14,
      adapter = "io.landerlyoung.github.kproto.parser.serialtest.wire.TextItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<TextItem> pack_msg;

  @WireField(
      tag = 15,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "io.landerlyoung.github.kproto.parser.serialtest.wire.TextItem#ADAPTER"
  )
  public final Map<String, TextItem> map_msg;

  @WireField(
      tag = 16,
      keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final Map<Integer, String> map_is;

  public Types(String title, String name, String gender, Integer opt_int32, Long opt_int64, Integer opt_sint32, Long opt_sint64, Boolean opt_bool, Float opt_float, Double opt_double, ByteString opt_bytes, List<Integer> pack_int32, List<String> pack_string, List<TextItem> pack_msg, Map<String, TextItem> map_msg, Map<Integer, String> map_is) {
    this(title, name, gender, opt_int32, opt_int64, opt_sint32, opt_sint64, opt_bool, opt_float, opt_double, opt_bytes, pack_int32, pack_string, pack_msg, map_msg, map_is, ByteString.EMPTY);
  }

  public Types(String title, String name, String gender, Integer opt_int32, Long opt_int64, Integer opt_sint32, Long opt_sint64, Boolean opt_bool, Float opt_float, Double opt_double, ByteString opt_bytes, List<Integer> pack_int32, List<String> pack_string, List<TextItem> pack_msg, Map<String, TextItem> map_msg, Map<Integer, String> map_is, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.title = title;
    this.name = name;
    this.gender = gender;
    this.opt_int32 = opt_int32;
    this.opt_int64 = opt_int64;
    this.opt_sint32 = opt_sint32;
    this.opt_sint64 = opt_sint64;
    this.opt_bool = opt_bool;
    this.opt_float = opt_float;
    this.opt_double = opt_double;
    this.opt_bytes = opt_bytes;
    this.pack_int32 = Internal.immutableCopyOf("pack_int32", pack_int32);
    this.pack_string = Internal.immutableCopyOf("pack_string", pack_string);
    this.pack_msg = Internal.immutableCopyOf("pack_msg", pack_msg);
    this.map_msg = Internal.immutableCopyOf("map_msg", map_msg);
    this.map_is = Internal.immutableCopyOf("map_is", map_is);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.title = title;
    builder.name = name;
    builder.gender = gender;
    builder.opt_int32 = opt_int32;
    builder.opt_int64 = opt_int64;
    builder.opt_sint32 = opt_sint32;
    builder.opt_sint64 = opt_sint64;
    builder.opt_bool = opt_bool;
    builder.opt_float = opt_float;
    builder.opt_double = opt_double;
    builder.opt_bytes = opt_bytes;
    builder.pack_int32 = Internal.copyOf("pack_int32", pack_int32);
    builder.pack_string = Internal.copyOf("pack_string", pack_string);
    builder.pack_msg = Internal.copyOf("pack_msg", pack_msg);
    builder.map_msg = Internal.copyOf("map_msg", map_msg);
    builder.map_is = Internal.copyOf("map_is", map_is);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Types)) return false;
    Types o = (Types) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(title, o.title)
        && Internal.equals(name, o.name)
        && Internal.equals(gender, o.gender)
        && Internal.equals(opt_int32, o.opt_int32)
        && Internal.equals(opt_int64, o.opt_int64)
        && Internal.equals(opt_sint32, o.opt_sint32)
        && Internal.equals(opt_sint64, o.opt_sint64)
        && Internal.equals(opt_bool, o.opt_bool)
        && Internal.equals(opt_float, o.opt_float)
        && Internal.equals(opt_double, o.opt_double)
        && Internal.equals(opt_bytes, o.opt_bytes)
        && pack_int32.equals(o.pack_int32)
        && pack_string.equals(o.pack_string)
        && pack_msg.equals(o.pack_msg)
        && map_msg.equals(o.map_msg)
        && map_is.equals(o.map_is);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (gender != null ? gender.hashCode() : 0);
      result = result * 37 + (opt_int32 != null ? opt_int32.hashCode() : 0);
      result = result * 37 + (opt_int64 != null ? opt_int64.hashCode() : 0);
      result = result * 37 + (opt_sint32 != null ? opt_sint32.hashCode() : 0);
      result = result * 37 + (opt_sint64 != null ? opt_sint64.hashCode() : 0);
      result = result * 37 + (opt_bool != null ? opt_bool.hashCode() : 0);
      result = result * 37 + (opt_float != null ? opt_float.hashCode() : 0);
      result = result * 37 + (opt_double != null ? opt_double.hashCode() : 0);
      result = result * 37 + (opt_bytes != null ? opt_bytes.hashCode() : 0);
      result = result * 37 + pack_int32.hashCode();
      result = result * 37 + pack_string.hashCode();
      result = result * 37 + pack_msg.hashCode();
      result = result * 37 + map_msg.hashCode();
      result = result * 37 + map_is.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (title != null) builder.append(", title=").append(title);
    if (name != null) builder.append(", name=").append(name);
    if (gender != null) builder.append(", gender=").append(gender);
    if (opt_int32 != null) builder.append(", opt_int32=").append(opt_int32);
    if (opt_int64 != null) builder.append(", opt_int64=").append(opt_int64);
    if (opt_sint32 != null) builder.append(", opt_sint32=").append(opt_sint32);
    if (opt_sint64 != null) builder.append(", opt_sint64=").append(opt_sint64);
    if (opt_bool != null) builder.append(", opt_bool=").append(opt_bool);
    if (opt_float != null) builder.append(", opt_float=").append(opt_float);
    if (opt_double != null) builder.append(", opt_double=").append(opt_double);
    if (opt_bytes != null) builder.append(", opt_bytes=").append(opt_bytes);
    if (!pack_int32.isEmpty()) builder.append(", pack_int32=").append(pack_int32);
    if (!pack_string.isEmpty()) builder.append(", pack_string=").append(pack_string);
    if (!pack_msg.isEmpty()) builder.append(", pack_msg=").append(pack_msg);
    if (!map_msg.isEmpty()) builder.append(", map_msg=").append(map_msg);
    if (!map_is.isEmpty()) builder.append(", map_is=").append(map_is);
    return builder.replace(0, 2, "Types{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Types, Builder> {
    public String title;

    public String name;

    public String gender;

    public Integer opt_int32;

    public Long opt_int64;

    public Integer opt_sint32;

    public Long opt_sint64;

    public Boolean opt_bool;

    public Float opt_float;

    public Double opt_double;

    public ByteString opt_bytes;

    public List<Integer> pack_int32;

    public List<String> pack_string;

    public List<TextItem> pack_msg;

    public Map<String, TextItem> map_msg;

    public Map<Integer, String> map_is;

    public Builder() {
      pack_int32 = Internal.newMutableList();
      pack_string = Internal.newMutableList();
      pack_msg = Internal.newMutableList();
      map_msg = Internal.newMutableMap();
      map_is = Internal.newMutableMap();
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder gender(String gender) {
      this.gender = gender;
      return this;
    }

    /**
     * omit uint
     */
    public Builder opt_int32(Integer opt_int32) {
      this.opt_int32 = opt_int32;
      return this;
    }

    public Builder opt_int64(Long opt_int64) {
      this.opt_int64 = opt_int64;
      return this;
    }

    public Builder opt_sint32(Integer opt_sint32) {
      this.opt_sint32 = opt_sint32;
      return this;
    }

    public Builder opt_sint64(Long opt_sint64) {
      this.opt_sint64 = opt_sint64;
      return this;
    }

    public Builder opt_bool(Boolean opt_bool) {
      this.opt_bool = opt_bool;
      return this;
    }

    public Builder opt_float(Float opt_float) {
      this.opt_float = opt_float;
      return this;
    }

    public Builder opt_double(Double opt_double) {
      this.opt_double = opt_double;
      return this;
    }

    public Builder opt_bytes(ByteString opt_bytes) {
      this.opt_bytes = opt_bytes;
      return this;
    }

    public Builder pack_int32(List<Integer> pack_int32) {
      Internal.checkElementsNotNull(pack_int32);
      this.pack_int32 = pack_int32;
      return this;
    }

    public Builder pack_string(List<String> pack_string) {
      Internal.checkElementsNotNull(pack_string);
      this.pack_string = pack_string;
      return this;
    }

    public Builder pack_msg(List<TextItem> pack_msg) {
      Internal.checkElementsNotNull(pack_msg);
      this.pack_msg = pack_msg;
      return this;
    }

    public Builder map_msg(Map<String, TextItem> map_msg) {
      Internal.checkElementsNotNull(map_msg);
      this.map_msg = map_msg;
      return this;
    }

    public Builder map_is(Map<Integer, String> map_is) {
      Internal.checkElementsNotNull(map_is);
      this.map_is = map_is;
      return this;
    }

    @Override
    public Types build() {
      return new Types(title, name, gender, opt_int32, opt_int64, opt_sint32, opt_sint64, opt_bool, opt_float, opt_double, opt_bytes, pack_int32, pack_string, pack_msg, map_msg, map_is, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Types extends ProtoAdapter<Types> {
    private final ProtoAdapter<Map<String, TextItem>> map_msg = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, TextItem.ADAPTER);

    private final ProtoAdapter<Map<Integer, String>> map_is = ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.STRING);

    ProtoAdapter_Types() {
      super(FieldEncoding.LENGTH_DELIMITED, Types.class);
    }

    @Override
    public int encodedSize(Types value) {
      return (value.title != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.title) : 0)
          + (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.name) : 0)
          + (value.gender != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.gender) : 0)
          + (value.opt_int32 != null ? ProtoAdapter.INT32.encodedSizeWithTag(4, value.opt_int32) : 0)
          + (value.opt_int64 != null ? ProtoAdapter.INT64.encodedSizeWithTag(5, value.opt_int64) : 0)
          + (value.opt_sint32 != null ? ProtoAdapter.SINT32.encodedSizeWithTag(6, value.opt_sint32) : 0)
          + (value.opt_sint64 != null ? ProtoAdapter.SINT64.encodedSizeWithTag(7, value.opt_sint64) : 0)
          + (value.opt_bool != null ? ProtoAdapter.BOOL.encodedSizeWithTag(8, value.opt_bool) : 0)
          + (value.opt_float != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(9, value.opt_float) : 0)
          + (value.opt_double != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(10, value.opt_double) : 0)
          + (value.opt_bytes != null ? ProtoAdapter.BYTES.encodedSizeWithTag(11, value.opt_bytes) : 0)
          + ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(12, value.pack_int32)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(13, value.pack_string)
          + TextItem.ADAPTER.asRepeated().encodedSizeWithTag(14, value.pack_msg)
          + map_msg.encodedSizeWithTag(15, value.map_msg)
          + map_is.encodedSizeWithTag(16, value.map_is)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Types value) throws IOException {
      if (value.title != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.title);
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      if (value.gender != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.gender);
      if (value.opt_int32 != null) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.opt_int32);
      if (value.opt_int64 != null) ProtoAdapter.INT64.encodeWithTag(writer, 5, value.opt_int64);
      if (value.opt_sint32 != null) ProtoAdapter.SINT32.encodeWithTag(writer, 6, value.opt_sint32);
      if (value.opt_sint64 != null) ProtoAdapter.SINT64.encodeWithTag(writer, 7, value.opt_sint64);
      if (value.opt_bool != null) ProtoAdapter.BOOL.encodeWithTag(writer, 8, value.opt_bool);
      if (value.opt_float != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 9, value.opt_float);
      if (value.opt_double != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 10, value.opt_double);
      if (value.opt_bytes != null) ProtoAdapter.BYTES.encodeWithTag(writer, 11, value.opt_bytes);
      ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 12, value.pack_int32);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 13, value.pack_string);
      TextItem.ADAPTER.asRepeated().encodeWithTag(writer, 14, value.pack_msg);
      map_msg.encodeWithTag(writer, 15, value.map_msg);
      map_is.encodeWithTag(writer, 16, value.map_is);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Types decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.title(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.gender(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.opt_int32(ProtoAdapter.INT32.decode(reader)); break;
          case 5: builder.opt_int64(ProtoAdapter.INT64.decode(reader)); break;
          case 6: builder.opt_sint32(ProtoAdapter.SINT32.decode(reader)); break;
          case 7: builder.opt_sint64(ProtoAdapter.SINT64.decode(reader)); break;
          case 8: builder.opt_bool(ProtoAdapter.BOOL.decode(reader)); break;
          case 9: builder.opt_float(ProtoAdapter.FLOAT.decode(reader)); break;
          case 10: builder.opt_double(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 11: builder.opt_bytes(ProtoAdapter.BYTES.decode(reader)); break;
          case 12: builder.pack_int32.add(ProtoAdapter.INT32.decode(reader)); break;
          case 13: builder.pack_string.add(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.pack_msg.add(TextItem.ADAPTER.decode(reader)); break;
          case 15: builder.map_msg.putAll(map_msg.decode(reader)); break;
          case 16: builder.map_is.putAll(map_is.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Types redact(Types value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.pack_msg, TextItem.ADAPTER);
      Internal.redactElements(builder.map_msg, TextItem.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
