// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto.proto
package io.landerlyoung.github.kproto.performance.serialtest.wire.kotlin

import com.squareup.wire.*
import com.squareup.wire.Message
import okio.ByteString

data class SearchRequest(
    @field:WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter.STRING") val query: String?
            = null,
    @field:WireField(tag = 2, adapter = "com.squareup.wire.ProtoAdapter.INT32") val page_number:
            Int? = null,
    @field:WireField(tag = 3, adapter = "com.squareup.wire.ProtoAdapter.INT32") val result_per_page:
            Int? = null,
    @field:WireField(tag = 4, adapter = "com.squareup.wire.ProtoAdapter.STRING") val results:
            List<String> = emptyList(),
    @field:WireField(tag = 5, adapter = "com.squareup.wire.ProtoAdapter.BYTES") val buffer:
            ByteString? = null,
    val unknownFields: ByteString = ByteString.EMPTY
) : Message<SearchRequest, SearchRequest.Builder>(ADAPTER, unknownFields) {
    @Deprecated(
            message = "Shouldn't be used in Kotlin",
            level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Builder = Builder(this.copy())

    class Builder(private val message: SearchRequest) : Message.Builder<SearchRequest, Builder>() {
        override fun build(): SearchRequest = message
    }

    companion object {
        @JvmField
        val ADAPTER: ProtoAdapter<SearchRequest> = object : ProtoAdapter<SearchRequest>(
            FieldEncoding.LENGTH_DELIMITED, 
            SearchRequest::class.java
        ) {
            override fun encodedSize(value: SearchRequest): Int = 
                ProtoAdapter.STRING.encodedSizeWithTag(1, value.query) +
                ProtoAdapter.INT32.encodedSizeWithTag(2, value.page_number) +
                ProtoAdapter.INT32.encodedSizeWithTag(3, value.result_per_page) +
                ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(4, value.results) +
                ProtoAdapter.BYTES.encodedSizeWithTag(5, value.buffer) +
                value.unknownFields.size

            override fun encode(writer: ProtoWriter, value: SearchRequest) {
                ProtoAdapter.STRING.encodeWithTag(writer, 1, value.query)
                ProtoAdapter.INT32.encodeWithTag(writer, 2, value.page_number)
                ProtoAdapter.INT32.encodeWithTag(writer, 3, value.result_per_page)
                ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.results)
                ProtoAdapter.BYTES.encodeWithTag(writer, 5, value.buffer)
                writer.writeBytes(value.unknownFields)
            }

            override fun decode(reader: ProtoReader): SearchRequest {
                var query: String? = null
                var page_number: Int? = null
                var result_per_page: Int? = null
                val results = mutableListOf<String>()
                var buffer: ByteString? = null
                val unknownFields = reader.forEachTag { tag ->
                    when (tag) {
                        1 -> query = ProtoAdapter.STRING.decode(reader)
                        2 -> page_number = ProtoAdapter.INT32.decode(reader)
                        3 -> result_per_page = ProtoAdapter.INT32.decode(reader)
                        4 -> results.add(ProtoAdapter.STRING.decode(reader))
                        5 -> buffer = ProtoAdapter.BYTES.decode(reader)
                        else -> TagHandler.UNKNOWN_TAG
                    }
                }
                return SearchRequest(
                    query = query,
                    page_number = page_number,
                    result_per_page = result_per_page,
                    results = results,
                    buffer = buffer,
                    unknownFields = unknownFields
                )
            }
        }
    }
}
